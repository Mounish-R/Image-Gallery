<template>
  <div class="image-gallery">
    <!-- Header with Title -->
    <header class="site-header">
      <h1>Enhanced Image Gallery</h1>
    </header>

    <!-- Upload Button and Form -->
    <div class="upload-section">
      <button @click="toggleUploadForm" class="btn btn-primary">
        {{ showUploadForm ? 'Hide Upload Form' : 'Upload an Image' }}
      </button>
      <div v-if="showUploadForm" class="image-upload">
        <input type="text" v-model="newImageUrl" placeholder="Image URL" required />
        <input type="text" v-model="newImageAlt" placeholder="Image Description" required />
        <input type="text" v-model="newImageTitle" placeholder="Image Title" required />
        <input type="date" v-model="newImageDate" placeholder="Image Date" required />
        <button @click="addImage" class="btn btn-success">Add Image</button>
      </div>
    </div>

    <!-- Upload Status and Progress -->
    <div v-if="uploadStatus" class="upload-status">
      <p>{{ uploadStatus }}</p>
      <progress v-if="uploadProgress !== null" :value="uploadProgress" max="100"></progress>
    </div>

    <!-- Display Added Image Title -->
    <div v-if="uploadedImageTitle" class="added-image-title">
      <p>Added Image Title: {{ uploadedImageTitle }}</p>
    </div>

    <!-- Image Gallery -->
    <div class="gallery-grid">
      <div v-for="image in sortedImages" :key="image.id" class="image-card">
        <img :src="image.src" :alt="image.alt" class="image-card__img" @click="openModal(image)" />
        <div class="image-card__overlay">
          <h3>{{ image.title }}</h3>
          <p>{{ formatDate(image.date) }}</p>
          <button class="btn btn-danger" @click.stop="deleteImage(image.id)">Delete</button>
        </div>
      </div>
    </div>

    <!-- Modal -->
    <div v-if="selectedImage" class="modal" @click="closeModal">
      <div class="modal-content" @click.stop>
        <button class="nav-btn prev-btn" @click="prevImage" :disabled="isFirstImage">&laquo; Previous</button>
        <img :src="selectedImage.src" :alt="selectedImage.alt" class="modal-img" />
        <div class="modal-info">
          <h2>{{ selectedImage.title }}</h2>
          <p>{{ selectedImage.alt }}</p>
          <p><strong>Date:</strong> {{ formatDate(selectedImage.date) }}</p>
        </div>
        <button class="nav-btn next-btn" @click="nextImage" :disabled="isLastImage">Next &raquo;</button>
        <button class="close-btn" @click="closeModal">&times;</button>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      images: [],
      selectedImage: null,
      newImageUrl: '',
      newImageAlt: '',
      newImageTitle: '',
      newImageDate: '',
      uploadStatus: '',
      uploadProgress: null,
      uploadedImageTitle: '',
      showUploadForm: false,
    };
  },
  computed: {
    sortedImages() {
      return [...this.images].sort((a, b) => new Date(b.date) - new Date(a.date));
    },
    isFirstImage() {
      return this.selectedImage && this.sortedImages.findIndex(image => image.id === this.selectedImage.id) === 0;
    },
    isLastImage() {
      return this.selectedImage && this.sortedImages.findIndex(image => image.id === this.selectedImage.id) === this.sortedImages.length - 1;
    },
  },
  methods: {
    toggleUploadForm() {
      this.showUploadForm = !this.showUploadForm;
    },
    addImage() {
      if (this.newImageUrl && this.newImageAlt && this.newImageTitle && this.newImageDate) {
        this.uploadStatus = 'Uploading image...';
        this.uploadProgress = 0;

        const interval = setInterval(() => {
          if (this.uploadProgress < 100) {
            this.uploadProgress += 10;
          } else {
            clearInterval(interval);
          }
        }, 100);

        setTimeout(() => {
          const newImage = {
            id: Date.now(),
            src: this.newImageUrl,
            alt: this.newImageAlt,
            title: this.newImageTitle,
            date: this.newImageDate,
          };
          this.images.push(newImage);
          this.uploadStatus = 'Image uploaded successfully!';
          this.uploadedImageTitle = this.newImageTitle;
          this.resetForm();
          this.showUploadForm = false;
          setTimeout(() => {
            this.uploadStatus = '';
            this.uploadedImageTitle = '';
          }, 2000);
        }, 1000);
      } else {
        this.uploadStatus = 'Please fill in all fields.';
        setTimeout(() => {
          this.uploadStatus = '';
        }, 2000);
      }
    },
    resetForm() {
      this.newImageUrl = '';
      this.newImageAlt = '';
      this.newImageTitle = '';
      this.newImageDate = '';
      this.uploadProgress = null;
    },
    deleteImage(imageId) {
      if (confirm('Are you sure you want to delete this image?')) {
        this.images = this.images.filter(image => image.id !== imageId);
        if (this.selectedImage && this.selectedImage.id === imageId) {
          this.closeModal();
        }
      }
    },
    openModal(image) {
      this.selectedImage = image;
    },
    closeModal() {
      this.selectedImage = null;
    },
    prevImage() {
      const currentIndex = this.sortedImages.findIndex(image => image.id === this.selectedImage.id);
      if (currentIndex > 0) {
        this.selectedImage = this.sortedImages[currentIndex - 1];
      }
    },
    nextImage() {
      const currentIndex = this.sortedImages.findIndex(image => image.id === this.selectedImage.id);
      if (currentIndex < this.sortedImages.length - 1) {
        this.selectedImage = this.sortedImages[currentIndex + 1];
      }
    },
    formatDate(dateString) {
      return new Date(dateString).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });
    },
  },
};
</script>

<style scoped>
.image-gallery {
  font-family: Arial, sans-serif;
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.site-header {
  text-align: center;
  margin-bottom: 30px;
  background-color: #f0f0f0;
  padding: 20px;
  border-radius: 5px;
}

.upload-section {
  text-align: center;
  margin-bottom: 30px;
}

.image-upload {
  display: flex;
  flex-direction: column;
  gap: 10px;
  max-width: 300px;
  margin: 20px auto;
}

.upload-status {
  text-align: center;
  margin-bottom: 20px;
}

.added-image-title {
  text-align: center;
  margin-bottom: 20px;
  font-weight: bold;
}

.gallery-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
}

.image-card {
  position: relative;
  overflow: hidden;
  border-radius: 5px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  transition: transform 0.3s ease;
}

.image-card:hover {
  transform: scale(1.05);
}

.image-card__img {
  width: 100%;
  height: 200px;
  object-fit: cover;
}

.image-card__overlay {
  position: absolute;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(0,0,0,0.7);
  color: white;
  padding: 10px;
  transform: translateY(100%);
  transition: transform 0.3s ease;
}

.image-card:hover .image-card__overlay {
  transform: translateY(0);
}

.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal-content {
  background: white;
  padding: 20px;
  border-radius: 5px;
  max-width: 80%;
  max-height: 80%;
  overflow: auto;
  position: relative;
}

.modal-img {
  max-width: 100%;
  max-height: 60vh;
  display: block;
  margin: 0 auto;
}

.modal-info {
  margin-top: 20px;
  text-align: center;
}

.nav-btn, .close-btn {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
  border-radius: 5px;
}

.close-btn {
  position: absolute;
  top: 10px;
  right: 10px;
  font-size: 24px;
  background: none;
  color: #333;
}

.nav-btn:disabled {
  background-color: #ccc;
  cursor: not-allowed;
}

.btn {
  padding: 10px 15px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.btn-primary {
  background-color: #007bff;
  color: white;
}

.btn-success {
  background-color: #28a745;
  color: white;
}

.btn-danger {
  background-color: #dc3545;
  color: white;
}
</style>
